image: docker:git
services:
- docker:dind

stages:
- build
- package
- clean

build:
  image: maven:3.5.4-jdk-8-alpine
  stage: build
  script:
    # - apk update && apk upgrade && apk add git 
    - apk add git 

    # Set the M2_HOME environment variable 
    - export M2_HOME=/usr/share/maven
    
    # Download JFrog CLI
    - curl -fL https://getcli.jfrog.io | sh

    # Configure Artifactory instance with JFrog CLI
    - ./jfrog rt config --url=$ARTIFACTORY_URL --user=$ARTIFACTORY_USER --password=$ARTIFACTORY_PASS
    - ./jfrog rt c show
    
    # - mvn clean install
    # - ./jfrog rt mvn "clean install sonar:sonar -Dsonar.language=java -Dsonar.projectKey=gitlabci-maven-artifactory -Dsonar.java.binaries=* -Dsonar.host.url=http://10.0.0.173:9000 -Dsonar.login=308aa92369500dbfff00b38283e358031bfea8aa" maven.conf --build-name=gitlabci-maven-artifactory --build-number=$CI_JOB_ID
    - ./jfrog rt mvn "clean install" maven.conf --build-name=gitlabci-maven-artifactory --build-number=$CI_JOB_ID
  
    # bcs = build collect environment variables 
    - ./jfrog rt bce gitlabci-maven-artifactory $CI_JOB_ID
        
    # bag = build add git (git revision & jira)
    # The build-add-git (bag) command collects the Git revision and URL from the local .git directory and adds it to the build-info. 
    # It can also collect the list of tracked project issues (for example, issues stored in JIRA or other bug tracking systems) and add them to the build-info. 
    # The issues are collected by reading the git commit messages from the local git log
    - ./jfrog rt bag gitlabci-maven-artifactory $CI_JOB_ID --config jira-cli.conf
    
    # set sonar url
    - ./jfrog rt sp "libs-snapshot-local/org/jfrog/test/multi3/3.7-SNAPSHOT/*.war" "qulity.gate.sonarUrl=http://192.168.230.156:9000/dashboard/index/"
    
    # sp = set property
    - ./jfrog rt sp "libs-snapshot-local/org/jfrog/test/multi3/3.7-SNAPSHOT/*.war" "deploy.tool=ansible"
    - ./jfrog rt sp "libs-snapshot-local/org/jfrog/test/multi3/3.7-SNAPSHOT/*.war" "ip=127.0.0.1"
    
    # bp = build publish
    - ./jfrog rt bp gitlabci-maven-artifactory $CI_JOB_ID
    
    # bpr = build promote 
    # - ./jfrog rt bpr gitlabci-maven-artifactory $CI_JOB_ID kyle-maven-release-local
    
    # bs = build scan, scan a already published build
    # - ./jfrog rt bs gitlabci-maven-artifactory $CI_JOB_ID --fail=false
    
    # dl = download
    # - ./jfrog rt dl kyle-maven-dev-local/org/jfrog/test/multi3/3.7-SNAPSHOT/multi3-3.7-20191213.050538-8.war all-my-frogs/

  when: manual